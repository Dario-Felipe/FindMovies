{"version":3,"sources":["components/Header/index.js","services/api.js","pages/main/index.js","pages/movie/index.js","routes.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","api","axios","create","baseURL","Main","state","Movie","Plot","Poster","Title","loadMovies","nameMovie","a","document","getElementById","value","get","response","data","Response","alert","setState","console","log","this","className","id","type","placeholder","required","onClick","src","to","imdbID","Component","movie","loadMovie","props","match","params","Actors","Director","Country","Genre","Runtime","Year","imdbRating","Routes","exact","path","component","main","Footer","href","target","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79ddf96b.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst Header = () => (\n  <header>\n    <h1> Find Movies </h1>\n  </header>\n)\n\nexport default Header;","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: \"http://www.omdbapi.com/\"\n});\n\nexport default api;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\nimport './style.css';\n\nexport default class Main extends Component {\n  state = {\n    Movie: {\n      Plot: \"Logo após preencher o campo acima, aqui terá a descrição do filme!\",\n      Poster: \"https://image.freepik.com/fotos-gratis/fundo-abstrato-preto-escuro-com-lascas-de-madeira_24972-208.jpg\",\n      Title: \"Preencha o campo acima!\"\n    }\n  }\n\n  loadMovies = async ( nameMovie ) => {\n    nameMovie = document.getElementById(\"nameMovie\").value;\n    try {\n      const response = await api.get(`?t=${ nameMovie }&apikey=5dfda1de`);\n      \n      if(response.data.Response == \"False\") {\n        alert(\"Filme não encontrado, tente outro título!\");\n      } else {\n        this.setState({ Movie: response.data }); \n        console.log(this.state);\n      }\n\n    } \n    catch (error) {\n      alert(`Erro ao pesquisar ${ nameMovie }, tente novamente!`);\n    }\n  };\n\n  render() {\n    const { Movie } = this.state;\n\n    return(\n      <div className = \"App-Main\">\n        <div className = \"search-movie\">\n          <input id = \"nameMovie\" type = \"text\" placeholder = \"Nome do Filme...\" required></input>\n          <button onClick = { this.loadMovies }> Pesquisar </button>\n        </div>\n        <div className = \"results\">\n          <article>\n            <h2> { Movie.Title } </h2>\n            <img src = { Movie.Poster } />\n            <p> <strong>Descrição:</strong> { Movie.Plot } </p>\n            <Link id = \"detail\" to = { `/${ Movie.imdbID }` }> Ver mais </Link>\n          </article>\n        </div>\n      </div>\n    )\n  };\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\nimport './style.css';\n\n\nexport default class movie extends Component {\n  state = {\n    Movie: {}\n  }\n\n  componentDidMount() {\n    this.loadMovie();\n  }\n\n  loadMovie = async () => {\n    const { id } = this.props.match.params;\n\n    const response = await api.get(`/?i=${ id }&apikey=5dfda1de`);\n\n    this.setState({ Movie: response.data });\n    console.log(this.state.Movie);\n  }\n  \n  render() {\n    const { Movie } = this.state;\n\n    return (\n      <div className = \"resulted\">\n          <article>\n            <h2> { Movie.Title } </h2>\n            <img src = { Movie.Poster } />\n            <p> <strong>Descrição:</strong> { Movie.Plot } </p>\n            <p> <strong>Atores:</strong> { Movie.Actors } </p>\n            <p> <strong>Direção:</strong> { Movie.Director } </p>\n            <p> <strong>País de origem:</strong> { Movie.Country } </p>\n            <p> <strong>Gênero:</strong> { Movie.Genre } </p>\n            <p> <strong>Duração do filme:</strong> { Movie.Runtime } </p>\n            <p> <strong>Ano de lançamento:</strong> { Movie.Year } </p>\n            <p> <strong>Nota IMDB:</strong> { Movie.imdbRating } </p>\n            <Link id = \"detail\" to = { '/' }> Voltar a pagina anterior </Link>\n          </article>\n        </div>\n    )\n  }\n}","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport main from './pages/main/index';\nimport movie from './pages/movie/index';\n\nconst Routes = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path = '/' component = { main } ></Route>\n      <Route path = '/:id' component = { movie }></Route>\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default Routes;","import React from 'react';\nimport './style.css';\n\nconst Footer = () => (\n  <footer>\n    <h4> Acesse já: </h4>\n      <ul>\n        <li><a href=\"https://www.linkedin.com/in/dariofelipe\" target=\"_blank\"> Linkedin </a></li>\n        <li><a href=\"https://github.com/Dario-Felipe\" target=\"_blank\"> GitHub </a></li>\n      </ul>\n  </footer>\n);\n\nexport default Footer;","import React from 'react';\nimport Header from './components/Header';\nimport Routes from './routes';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className = \"App\">\n      <Header />\n      <Routes />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}